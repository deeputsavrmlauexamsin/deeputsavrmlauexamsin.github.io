name: Update User via Dispatch

on:
  repository_dispatch:
    types: [update_user]

permissions:
  contents: write

jobs:
  handle-dispatch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml qrcode pillow

      - name: Save payload to file
        run: |
          echo '${{ toJson(github.event.client_payload) }}' > payload.json
          echo "Payload saved."

      - name: Process payload and update files
        env:
          REPO: ${{ github.repository }}
          GH_ACTOR: ${{ github.actor }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          python - <<'PY'
import base64, csv, os, json, time
from pathlib import Path
from PIL import Image
import qrcode

# Load client payload
with open('payload.json', 'r', encoding='utf-8') as f:
    payload = json.load(f)

BASE = Path("Department/Print_Data")
PHOTOS = BASE / "photos"
QRS = BASE / "qr_codes"
CSV_PATH = BASE / "data.csv"

for p in [BASE, PHOTOS, QRS]:
    p.mkdir(parents=True, exist_ok=True)

# Unique ID and slug
next_id = str(int(time.time()))
slug = payload.get("slug") or base64.b64encode(next_id.encode()).decode()[:6]

# Save photo
photo_data = payload.get("photo_data_url", "")
photo_filename = f"{next_id}_photo.jpg"
if photo_data.startswith("data:"):
    header, b64 = photo_data.split(",", 1)
    with open(PHOTOS / photo_filename, "wb") as f:
        f.write(base64.b64decode(b64))
else:
    photo_filename = ""

# Make QR
qr_filename = f"{next_id}_QR.png"
link = f"https://{os.environ.get('REPO','')}/Department/Print_Data/?ID={slug}"
qr = qrcode.QRCode(box_size=10, border=4)
qr.add_data(link)
qr.make(fit=True)
img = qr.make_image(fill_color="black", back_color="white")
img.save(QRS / qr_filename)

# Gather details
data = {
    "id": next_id,
    "slug": slug,
    "name": payload.get("name", ""),
    "phone": payload.get("phone", ""),
    "ghat": f"राम की पैड़ी घाट नं : {payload.get('ghat', '')}",
    "role": payload.get("role", ""),
    "photo": photo_filename,
    "college": payload.get("college", "")
}

# Append to TSV
fields = ["id","slug","name","phone","ghat","role","photo","college"]
rows = []
if CSV_PATH.exists():
    with open(CSV_PATH, "r", encoding="utf-8") as f:
        txt = f.read().strip()
        if txt:
            reader = csv.DictReader(txt.splitlines(), delimiter='\t')
            rows.extend(reader)
rows.append(data)
with open(CSV_PATH, "w", encoding="utf-8", newline='') as f:
    w = csv.DictWriter(f, fieldnames=fields, delimiter='\t')
    w.writeheader()
    w.writerows(rows)

# Commit
os.system('git add -A')
os.system(f'git commit -m "Add user {data["name"]} id={next_id}" || true')
os.system('git push origin HEAD:main || true')
PY

      - name: Done
        run: echo "✅ User update workflow complete."
