name: Update User via Dispatch

on:
  repository_dispatch:
    types: [update_user]

permissions:
  contents: write

jobs:
  handle-dispatch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml qrcode pillow

      - name: Read event payload
        id: payload
        run: |
          echo "Event payload:"
          echo '${{ toJson(github.event.client_payload) }}' > payload.json
          echo "Payload saved to payload.json"

      - name: Run update script
        env:
          REPO: ${{ github.repository }}
          GH_ACTOR: ${{ github.actor }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          python - <<'PY'
import base64, csv, io, os, sys, json, time
from pathlib import Path
from datetime import datetime
from PIL import Image
import qrcode

# Load payload
with open('payload.json','r',encoding='utf-8') as f:
    payload = json.load(f)

# repo paths
BASE = Path("Department/Print_Data")
PHOTOS = BASE / "photos"
QRS = BASE / "qr_codes"
CSV_PATH = BASE / "data.csv"

PHOTOS.mkdir(parents=True, exist_ok=True)
QRS.mkdir(parents=True, exist_ok=True)
BASE.mkdir(parents=True, exist_ok=True)

# Determine next ID (use timestamp)
next_id = str(int(time.time()))
slug = payload.get("slug") or base64.b64encode(next_id.encode()).decode()[:6]

# Save photo (payload may include data URL)
photo_data_url = payload.get("photo_data_url", "")
photo_filename = f"{next_id}_photo.jpg"
if photo_data_url.startswith("data:"):
    header, b64 = photo_data_url.split(",",1)
    photo_bytes = base64.b64decode(b64)
    with open(PHOTOS/photo_filename, "wb") as fh:
        fh.write(photo_bytes)
else:
    photo_filename = ""

# Generate QR
qr_filename = f"{next_id}_QR.png"
link = f"https://{os.environ.get('REPO','')}/Department/Print_Data/?ID={slug}"
qr = qrcode.QRCode(box_size=10, border=4)
qr.add_data(link)
qr.make(fit=True)
img = qr.make_image(fill_color="black", back_color="white")
img.save(QRS/qr_filename)

# Gather user data
name_en = payload.get("name","")
phone = payload.get("phone","")
card_no = payload.get("card_number","")
ghat_no = payload.get("ghat","")
role_en = payload.get("role","")
college_en = payload.get("college","")

# Create display ghat text
ghat_text = f"राम की पैड़ी घाट नं : {ghat_no}"

# Append to CSV (TSV format)
fieldnames = ["id","slug","name","phone","ghat","role","photo","college"]
rows = []
if CSV_PATH.exists():
    with open(CSV_PATH, "r", encoding="utf-8") as f:
        txt = f.read().strip()
    if txt:
        reader = csv.DictReader(txt.splitlines(), delimiter='\t')
        for r in reader:
            rows.append(r)

rows.append({
    "id": next_id,
    "slug": slug,
    "name": name_en,
    "phone": phone,
    "ghat": ghat_text,
    "role": role_en,
    "photo": photo_filename,
    "college": college_en
})

with open(CSV_PATH, "w", encoding="utf-8", newline='') as f:
    w = csv.DictWriter(f, fieldnames=fieldnames, delimiter='\t')
    w.writeheader()
    w.writerows(rows)

# Commit and push
os.system('git add -A')
os.system(f'git commit -m "Add user {name_en} id={next_id}" || true')
os.system('git push origin HEAD:main || true')
PY

      - name: Show completion info
        run: echo "Workflow finished. Check Department/Print_Data for new files."
